{"ast":null,"code":"var _jsxFileName = \"/Users/arjay/Documents/pet-link/client/src/Components/Registration/Containers/RegistrationContainer.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport RegistrationForm from '../Components/RegistrationForm';\nimport { registerUser } from '../../../API/Login/loginAuth';\nimport { isEmpty } from 'lodash';\n\nconst Registration = ({\n  registrationErrors,\n  setRegistrationErrorsStore\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [registrationError, setRegistrationError] = useState({});\n\n  const onSubmit = values => {\n    setIsLoading(true);\n    const userData = {\n      userName: values.userName,\n      emailAddress: values.emailAddress,\n      password: values.password\n    };\n    registerUser(userData);\n  };\n\n  useEffect(() => {\n    setRegistrationErrorsStore({\n      userName: '',\n      email: '',\n      password: ''\n    });\n  }, []);\n  useEffect(() => {\n    setRegistrationError(registrationErrors);\n    setIsLoading(isEmpty(registrationErrors));\n  }, [registrationErrors]);\n  return /*#__PURE__*/React.createElement(RegistrationForm, {\n    onSubmit: ({\n      userName,\n      emailAddress,\n      password\n    }) => {\n      onSubmit({\n        userName,\n        emailAddress,\n        password\n      });\n    },\n    registrationErrorProps: registrationError,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Registration;","map":{"version":3,"sources":["/Users/arjay/Documents/pet-link/client/src/Components/Registration/Containers/RegistrationContainer.tsx"],"names":["React","useState","useEffect","RegistrationForm","registerUser","isEmpty","Registration","registrationErrors","setRegistrationErrorsStore","isLoading","setIsLoading","registrationError","setRegistrationError","onSubmit","values","userData","userName","emailAddress","password","email"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAaA,MAAMC,YAA6B,GAAG,CAAC;AACrCC,EAAAA,kBADqC;AAErCC,EAAAA;AAFqC,CAAD,KAGhC;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACU,iBAAD,EAAoBC,oBAApB,IAA4CX,QAAQ,CAAS,EAAT,CAA1D;;AACA,QAAMY,QAAQ,GAAIC,MAAD,IAAoB;AACnCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMK,QAAQ,GAAG;AACfC,MAAAA,QAAQ,EAAEF,MAAM,CAACE,QADF;AAEfC,MAAAA,YAAY,EAAEH,MAAM,CAACG,YAFN;AAGfC,MAAAA,QAAQ,EAAEJ,MAAM,CAACI;AAHF,KAAjB;AAMAd,IAAAA,YAAY,CAACW,QAAD,CAAZ;AACD,GATD;;AAWAb,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,0BAA0B,CAAC;AAAEQ,MAAAA,QAAQ,EAAE,EAAZ;AAAgBG,MAAAA,KAAK,EAAE,EAAvB;AAA2BD,MAAAA,QAAQ,EAAE;AAArC,KAAD,CAA1B;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,oBAAoB,CAACL,kBAAD,CAApB;AACAG,IAAAA,YAAY,CAACL,OAAO,CAACE,kBAAD,CAAR,CAAZ;AACD,GAHQ,EAGN,CAACA,kBAAD,CAHM,CAAT;AAIA,sBACE,oBAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,CAAC;AAAES,MAAAA,QAAF;AAAYC,MAAAA,YAAZ;AAA0BC,MAAAA;AAA1B,KAAD,KAA0C;AAClDL,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,QAAF;AAAYC,QAAAA,YAAZ;AAA0BC,QAAAA;AAA1B,OAAD,CAAR;AACD,KAHH;AAIE,IAAA,sBAAsB,EAAEP,iBAJ1B;AAKE,IAAA,SAAS,EAAEF,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAlCD;;AAoCA,eAAeH,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RegistrationForm from '../Components/RegistrationForm';\nimport { registerUser } from '../../../API/Login/loginAuth';\nimport { isEmpty } from 'lodash';\n\ninterface Values {\n  userName: string;\n  emailAddress: string;\n  password: string;\n}\n\ninterface Props {\n  registrationErrors?: any;\n  setRegistrationErrorsStore?: any;\n}\n\nconst Registration: React.FC<Props> = ({\n  registrationErrors,\n  setRegistrationErrorsStore,\n}) => {\n  const [isLoading, setIsLoading] = useState<Boolean>(false);\n  const [registrationError, setRegistrationError] = useState<Object>({});\n  const onSubmit = (values: Values) => {\n    setIsLoading(true);\n    const userData = {\n      userName: values.userName,\n      emailAddress: values.emailAddress,\n      password: values.password,\n    };\n\n    registerUser(userData);\n  };\n\n  useEffect(() => {\n    setRegistrationErrorsStore({ userName: '', email: '', password: '' });\n  }, []);\n\n  useEffect(() => {\n    setRegistrationError(registrationErrors);\n    setIsLoading(isEmpty(registrationErrors));\n  }, [registrationErrors]);\n  return (\n    <RegistrationForm\n      onSubmit={({ userName, emailAddress, password }) => {\n        onSubmit({ userName, emailAddress, password });\n      }}\n      registrationErrorProps={registrationError}\n      isLoading={isLoading}\n    />\n  );\n};\n\nexport default Registration;\n"]},"metadata":{},"sourceType":"module"}
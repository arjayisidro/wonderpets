{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../../Utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { dispatch } from '../../Store/GlobalStore';\nexport const loginUser = userData => {\n  axios.post('/api/users/sign-in', userData).then(res => {\n    console.log(res.data);\n    const {\n      token\n    } = res.data;\n    localStorage.setItem('jwtToken', token);\n    setAuthToken(token);\n    const decoded = jwt_decode(token); // // Set current user\n\n    dispatch.loginStore.setCurrentUser(decoded);\n  }).catch(err => {\n    dispatch.loginStore.setErrors(err.response.data);\n  });\n};\nexport const registerUser = (userData, history) => {\n  axios.post('/api/users/register', userData).then(() => {\n    history.push('/registration-success');\n  }).catch(err => {\n    dispatch.loginStore.setRegistrationErrors(err.response.data);\n  });\n};\nexport const LogoutUser = () => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken'); // Remove auth header token for future request\n\n  setAuthToken(false); // Set current user to empty object\n\n  dispatch.loginStore.setCurrentUser({});\n};","map":{"version":3,"sources":["/Users/arjay/Documents/pet-link/client/src/API/Login/loginAuth.ts"],"names":["axios","setAuthToken","jwt_decode","dispatch","loginUser","userData","post","then","res","console","log","data","token","localStorage","setItem","decoded","loginStore","setCurrentUser","catch","err","setErrors","response","registerUser","history","push","setRegistrationErrors","LogoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,QAAT,QAAyB,yBAAzB;AAaA,OAAO,MAAMC,SAAS,GAAIC,QAAD,IAA2B;AAClDL,EAAAA,KAAK,CACFM,IADH,CACQ,oBADR,EAC8BD,QAD9B,EAEGE,IAFH,CAESC,GAAD,IAAS;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYJ,GAAG,CAACG,IAAtB;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAX,IAAAA,YAAY,CAACW,KAAD,CAAZ;AACA,UAAMG,OAAO,GAAGb,UAAU,CAACU,KAAD,CAA1B,CALa,CAMb;;AACAT,IAAAA,QAAQ,CAACa,UAAT,CAAoBC,cAApB,CAAmCF,OAAnC;AACD,GAVH,EAWGG,KAXH,CAWUC,GAAD,IAAS;AACdhB,IAAAA,QAAQ,CAACa,UAAT,CAAoBI,SAApB,CAA8BD,GAAG,CAACE,QAAJ,CAAaV,IAA3C;AACD,GAbH;AAcD,CAfM;AAiBP,OAAO,MAAMW,YAAY,GAAG,CAACjB,QAAD,EAAyBkB,OAAzB,KAA0C;AACpEvB,EAAAA,KAAK,CACFM,IADH,CACQ,qBADR,EAC+BD,QAD/B,EAEGE,IAFH,CAEQ,MAAM;AACVgB,IAAAA,OAAO,CAACC,IAAR,CAAa,uBAAb;AACD,GAJH,EAKGN,KALH,CAKUC,GAAD,IAAS;AACdhB,IAAAA,QAAQ,CAACa,UAAT,CAAoBS,qBAApB,CAA0CN,GAAG,CAACE,QAAJ,CAAaV,IAAvD;AACD,GAPH;AAQD,CATM;AAWP,OAAO,MAAMe,UAAU,GAAG,MAAM;AAC9B;AACAb,EAAAA,YAAY,CAACc,UAAb,CAAwB,UAAxB,EAF8B,CAG9B;;AACA1B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ8B,CAK9B;;AACAE,EAAAA,QAAQ,CAACa,UAAT,CAAoBC,cAApB,CAAmC,EAAnC;AACD,CAPM","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../../Utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { dispatch } from '../../Store/GlobalStore';\n\ninterface Credentials {\n  emailAddress: string;\n  password: string;\n}\n\ninterface Registration {\n  userName: string;\n  emailAddress: string;\n  password: string;\n}\n\nexport const loginUser = (userData: Credentials) => {\n  axios\n    .post('/api/users/sign-in', userData)\n    .then((res) => {\n      console.log(res.data);\n      const { token } = res.data;\n      localStorage.setItem('jwtToken', token);\n      setAuthToken(token);\n      const decoded = jwt_decode(token);\n      // // Set current user\n      dispatch.loginStore.setCurrentUser(decoded);\n    })\n    .catch((err) => {\n      dispatch.loginStore.setErrors(err.response.data);\n    });\n};\n\nexport const registerUser = (userData: Registration, history: any) => {\n  axios\n    .post('/api/users/register', userData)\n    .then(() => {\n      history.push('/registration-success');\n    })\n    .catch((err) => {\n      dispatch.loginStore.setRegistrationErrors(err.response.data);\n    });\n};\n\nexport const LogoutUser = () => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header token for future request\n  setAuthToken(false);\n  // Set current user to empty object\n  dispatch.loginStore.setCurrentUser({});\n};\n"]},"metadata":{},"sourceType":"module"}
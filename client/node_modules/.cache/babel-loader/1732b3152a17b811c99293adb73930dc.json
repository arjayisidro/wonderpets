{"ast":null,"code":"var _jsxFileName = \"/Users/arjay/Documents/pet-link/client/src/Components/Login/Containers/LoginContainer.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { isEmpty } from 'lodash';\nimport LoginForm from '../Components/LoginForm';\nimport { loginUser } from '../../../API/Login/loginAuth';\nimport { connect } from 'react-redux';\n\nconst Login = ({\n  errors\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginError, setLoginError] = useState({});\n\n  const onSubmit = values => {\n    setIsLoading(true);\n    const userData = {\n      emailAddress: values.emailAddress,\n      password: values.password\n    };\n    loginUser(userData);\n  };\n\n  useEffect(() => {\n    setLoginError(errors);\n    setIsLoading(isEmpty(errors));\n    return () => {\n      setLoginError({});\n    };\n  }, [errors]);\n  return /*#__PURE__*/React.createElement(LoginForm, {\n    isLoading: isLoading,\n    errorsProps: loginError,\n    onSubmit: ({\n      emailAddress,\n      password\n    }) => onSubmit({\n      emailAddress,\n      password\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapProps = state => {\n  return {\n    errors: state.loginStore.errors\n  };\n};\n\nconst mapDispatch = dispatch => ({\n  setErrors: dispatch.loginStore.setErrors\n});\n\nexport default connect(mapProps, mapDispatch)(Login);","map":{"version":3,"sources":["/Users/arjay/Documents/pet-link/client/src/Components/Login/Containers/LoginContainer.tsx"],"names":["React","useState","useEffect","isEmpty","LoginForm","loginUser","connect","Login","errors","isLoading","setIsLoading","loginError","setLoginError","onSubmit","values","userData","emailAddress","password","mapProps","state","loginStore","mapDispatch","dispatch","setErrors"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAYA,MAAMC,KAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAC7C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAS,EAAT,CAA5C;;AACA,QAAMY,QAAQ,GAAIC,MAAD,IAAoB;AACnCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMK,QAAQ,GAAG;AACfC,MAAAA,YAAY,EAAEF,MAAM,CAACE,YADN;AAEfC,MAAAA,QAAQ,EAAEH,MAAM,CAACG;AAFF,KAAjB;AAKAZ,IAAAA,SAAS,CAACU,QAAD,CAAT;AACD,GARD;;AAUAb,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,aAAa,CAACJ,MAAD,CAAb;AACAE,IAAAA,YAAY,CAACP,OAAO,CAACK,MAAD,CAAR,CAAZ;AAEA,WAAO,MAAM;AACXI,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD;AAGD,GAPQ,EAON,CAACJ,MAAD,CAPM,CAAT;AASA,sBACE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEC,SADb;AAEE,IAAA,WAAW,EAAEE,UAFf;AAGE,IAAA,QAAQ,EAAE,CAAC;AAAEK,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,KACRJ,QAAQ,CAAC;AAAEG,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CA/BD;;AAiCA,MAAMC,QAAQ,GAAIC,KAAD,IAAuB;AACtC,SAAO;AACLX,IAAAA,MAAM,EAAEW,KAAK,CAACC,UAAN,CAAiBZ;AADpB,GAAP;AAGD,CAJD;;AAMA,MAAMa,WAAW,GAAIC,QAAD,KAAyB;AAC3CC,EAAAA,SAAS,EAAED,QAAQ,CAACF,UAAT,CAAoBG;AADY,CAAzB,CAApB;;AAIA,eAAejB,OAAO,CAACY,QAAD,EAAWG,WAAX,CAAP,CAAsCd,KAAtC,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { isEmpty } from 'lodash';\nimport LoginForm from '../Components/LoginForm';\nimport { loginUser } from '../../../API/Login/loginAuth';\nimport { connect } from 'react-redux';\nimport { IRootState, Dispatch } from '../../../Store/GlobalStore';\n\ninterface Values {\n  emailAddress: string;\n  password: string;\n}\n\ninterface Props {\n  errors?: any;\n}\n\nconst Login: React.FC<Props> = ({ errors }) => {\n  const [isLoading, setIsLoading] = useState<Boolean>(false);\n  const [loginError, setLoginError] = useState<Object>({});\n  const onSubmit = (values: Values) => {\n    setIsLoading(true);\n    const userData = {\n      emailAddress: values.emailAddress,\n      password: values.password,\n    };\n\n    loginUser(userData);\n  };\n\n  useEffect(() => {\n    setLoginError(errors);\n    setIsLoading(isEmpty(errors));\n\n    return () => {\n      setLoginError({});\n    };\n  }, [errors]);\n\n  return (\n    <LoginForm\n      isLoading={isLoading}\n      errorsProps={loginError}\n      onSubmit={({ emailAddress, password }) =>\n        onSubmit({ emailAddress, password })\n      }\n    />\n  );\n};\n\nconst mapProps = (state: IRootState) => {\n  return {\n    errors: state.loginStore.errors,\n  };\n};\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  setErrors: dispatch.loginStore.setErrors,\n});\n\nexport default connect(mapProps, mapDispatch as any)(Login);\n"]},"metadata":{},"sourceType":"module"}
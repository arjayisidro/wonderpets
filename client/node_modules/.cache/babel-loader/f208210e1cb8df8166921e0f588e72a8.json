{"ast":null,"code":"var _jsxFileName = \"/Users/arjay/Documents/pet-link/client/src/Components/Login/Containers/LoginContainer.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { isEmpty } from 'lodash';\nimport LoginForm from '../Components/LoginForm';\nimport { loginUser } from '../../../API/Login/loginAuth';\nimport { connect } from 'react-redux';\n\nconst Login = ({\n  errors,\n  setLoginErrors,\n  isAuthenticated,\n  history\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginError, setLoginError] = useState({});\n\n  const onSubmit = values => {\n    setIsLoading(true);\n    const userData = {\n      emailAddress: values.emailAddress,\n      password: values.password\n    };\n    loginUser(userData);\n  };\n\n  useEffect(() => {\n    if (isAuthenticated) {}\n  }, [isAuthenticated]);\n  useEffect(() => {\n    setLoginErrors({\n      email: '',\n      password: ''\n    });\n  }, []);\n  useEffect(() => {\n    setLoginError(errors);\n    setIsLoading(isEmpty(errors));\n  }, [errors]);\n  return /*#__PURE__*/React.createElement(LoginForm, {\n    isLoading: isLoading,\n    errorsProps: loginError,\n    onSubmit: ({\n      emailAddress,\n      password\n    }) => onSubmit({\n      emailAddress,\n      password\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapProps = state => {\n  return {\n    errors: state.loginStore.errors,\n    isAuthenticated: state.loginStore.isAuthenticated\n  };\n};\n\nconst mapDispatch = dispatch => ({\n  setLoginErrors: dispatch.loginStore.setErrors\n});\n\nexport default connect(mapProps, mapDispatch)(Login);","map":{"version":3,"sources":["/Users/arjay/Documents/pet-link/client/src/Components/Login/Containers/LoginContainer.tsx"],"names":["React","useState","useEffect","isEmpty","LoginForm","loginUser","connect","Login","errors","setLoginErrors","isAuthenticated","history","isLoading","setIsLoading","loginError","setLoginError","onSubmit","values","userData","emailAddress","password","email","mapProps","state","loginStore","mapDispatch","dispatch","setErrors"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAeA,MAAMC,KAAsB,GAAG,CAAC;AAC9BC,EAAAA,MAD8B;AAE9BC,EAAAA,cAF8B;AAG9BC,EAAAA,eAH8B;AAI9BC,EAAAA;AAJ8B,CAAD,KAKzB;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAS,EAAT,CAA5C;;AACA,QAAMe,QAAQ,GAAIC,MAAD,IAAoB;AACnCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMK,QAAQ,GAAG;AACfC,MAAAA,YAAY,EAAEF,MAAM,CAACE,YADN;AAEfC,MAAAA,QAAQ,EAAEH,MAAM,CAACG;AAFF,KAAjB;AAKAf,IAAAA,SAAS,CAACa,QAAD,CAAT;AACD,GARD;;AAUAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,eAAJ,EAAqB,CACpB;AACF,GAHQ,EAGN,CAACA,eAAD,CAHM,CAAT;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,cAAc,CAAC;AAAEY,MAAAA,KAAK,EAAE,EAAT;AAAaD,MAAAA,QAAQ,EAAE;AAAvB,KAAD,CAAd;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAlB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,aAAa,CAACP,MAAD,CAAb;AACAK,IAAAA,YAAY,CAACV,OAAO,CAACK,MAAD,CAAR,CAAZ;AACD,GAHQ,EAGN,CAACA,MAAD,CAHM,CAAT;AAKA,sBACE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEI,SADb;AAEE,IAAA,WAAW,EAAEE,UAFf;AAGE,IAAA,QAAQ,EAAE,CAAC;AAAEK,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,KACRJ,QAAQ,CAAC;AAAEG,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAD,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAzCD;;AA2CA,MAAME,QAAQ,GAAIC,KAAD,IAAuB;AACtC,SAAO;AACLf,IAAAA,MAAM,EAAEe,KAAK,CAACC,UAAN,CAAiBhB,MADpB;AAELE,IAAAA,eAAe,EAAEa,KAAK,CAACC,UAAN,CAAiBd;AAF7B,GAAP;AAID,CALD;;AAOA,MAAMe,WAAW,GAAIC,QAAD,KAAyB;AAC3CjB,EAAAA,cAAc,EAAEiB,QAAQ,CAACF,UAAT,CAAoBG;AADO,CAAzB,CAApB;;AAIA,eAAerB,OAAO,CAACgB,QAAD,EAAWG,WAAX,CAAP,CAAsClB,KAAtC,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { isEmpty } from 'lodash';\nimport LoginForm from '../Components/LoginForm';\nimport { loginUser } from '../../../API/Login/loginAuth';\nimport { connect } from 'react-redux';\nimport { IRootState, Dispatch } from '../../../Store/GlobalStore';\n\ninterface Values {\n  emailAddress: string;\n  password: string;\n}\n\ninterface Props {\n  errors?: any;\n  setLoginErrors?: any;\n  isAuthenticated: Boolean;\n  history?: any;\n}\n\nconst Login: React.FC<Props> = ({\n  errors,\n  setLoginErrors,\n  isAuthenticated,\n  history,\n}) => {\n  const [isLoading, setIsLoading] = useState<Boolean>(false);\n  const [loginError, setLoginError] = useState<Object>({});\n  const onSubmit = (values: Values) => {\n    setIsLoading(true);\n    const userData = {\n      emailAddress: values.emailAddress,\n      password: values.password,\n    };\n\n    loginUser(userData);\n  };\n\n  useEffect(() => {\n    if (isAuthenticated) {\n    }\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    setLoginErrors({ email: '', password: '' });\n  }, []);\n\n  useEffect(() => {\n    setLoginError(errors);\n    setIsLoading(isEmpty(errors));\n  }, [errors]);\n\n  return (\n    <LoginForm\n      isLoading={isLoading}\n      errorsProps={loginError}\n      onSubmit={({ emailAddress, password }) =>\n        onSubmit({ emailAddress, password })\n      }\n    />\n  );\n};\n\nconst mapProps = (state: IRootState) => {\n  return {\n    errors: state.loginStore.errors,\n    isAuthenticated: state.loginStore.isAuthenticated,\n  };\n};\n\nconst mapDispatch = (dispatch: Dispatch) => ({\n  setLoginErrors: dispatch.loginStore.setErrors,\n});\n\nexport default connect(mapProps, mapDispatch as any)(Login);\n"]},"metadata":{},"sourceType":"module"}